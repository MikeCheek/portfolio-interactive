/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 public/assets/models/Television.glb --types -t 
*/

import React, { useEffect, useState } from 'react';
import { Image, useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { RigidBody } from '@react-three/rapier';
import { extend } from '@react-three/fiber';
import { Mesh, MeshStandardMaterial, VideoTexture } from 'three';
import { geometry } from 'maath';
import CollidableText from './CollidableText';

type GLTFResult = GLTF & {
  nodes: {
    televisionModern_2: Mesh;
    televisionModern_2_1: Mesh;
    televisionModern_3: Mesh;
    televisionModern_3_1: Mesh;
  };
  materials: {
    metalDark: MeshStandardMaterial;
    metal: MeshStandardMaterial;
  };
  animations: any[];
};

type Body = JSX.IntrinsicElements['group'];

interface TelevisionTypes extends Body {
  imageUrl?: string;
  videoUrl?: string;
  title?: string;
  description?: string;
  href?: string,
  github?: string
  scale?: number
}

extend({ RoundedPlaneGeometry: geometry.RoundedPlaneGeometry });

export function Television({ imageUrl, videoUrl, title, rotation, position, description, href, github, scale = 8, ...props }: TelevisionTypes) {
  const { nodes, materials } = useGLTF('/assets/models/Television.glb') as GLTFResult;
  const [videoTexture, setVideoTexture] = useState<VideoTexture | null>(null);

  useEffect(() => {
    if (videoUrl) {
      const video = document.createElement('video');
      video.src = videoUrl;
      video.crossOrigin = 'anonymous';
      video.loop = true;
      video.muted = true;
      video.playsInline = true;
      video.play().catch(err => console.error("Autoplay blocked:", err));

      const texture = new VideoTexture(video);
      setVideoTexture(texture)
    }
  }, [videoUrl]);

  return (
    <RigidBody name="television" rotation={rotation} position={position}>
      <group scale={[scale, scale, scale]}>
        <group {...props} dispose={null}>
          <mesh geometry={nodes.televisionModern_2.geometry} material={materials.metalDark} />
          <mesh geometry={nodes.televisionModern_2_1.geometry} material={materials.metal} />
          <mesh geometry={nodes.televisionModern_3.geometry} material={materials.metal} />
          <mesh geometry={nodes.televisionModern_3_1.geometry} material={materials.metalDark} />
        </group>
        {
          videoTexture ? (
            <mesh rotation={[0, Math.PI, 0]} position={[0, 0.265, -0.03]}>
              <planeGeometry args={[0.67, 0.37]} />
              <meshBasicMaterial map={videoTexture} toneMapped={false} />
            </mesh>
          ) :
            imageUrl ? (
              <Image url={imageUrl} rotation={[0, Math.PI, 0]} position={[0, 0.265, -0.03]}>
                {/* @ts-ignore */}
                <roundedPlaneGeometry args={[0.67, 0.37, 0]} />
              </Image>
            ) : (
              <></>
            )}
      </group>
      {title ? (
        <CollidableText title={title} description={description} href={href} github={github} />
      ) : (
        <></>
      )}
    </RigidBody>
  );
}

useGLTF.preload('/assets/models/Television.glb');

